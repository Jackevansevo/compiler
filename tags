!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
name	setup.py	/^    name='compiler',$/;"	v	language:Python
packages	setup.py	/^    packages=['compiler'],$/;"	v	language:Python
license	setup.py	/^    license='MIT',$/;"	v	language:Python
entry_points	setup.py	/^    entry_points={$/;"	v	language:Python
include_package_data	setup.py	/^    include_package_data=True,$/;"	v	language:Python
install_requires	setup.py	/^    install_requires=['graphviz', 'attrs'],$/;"	v	language:Python
setup_requires	setup.py	/^    setup_requires=[$/;"	v	language:Python
tests_require	setup.py	/^    tests_require=[$/;"	v	language:Python
ROOT_DIR	definitions.py	/^ROOT_DIR = dirname(abspath(__file__))$/;"	v	language:Python
line_count	compiler/utils.py	/^def line_count(f):$/;"	f	language:Python
draw_graph	compiler/utils.py	/^def draw_graph(head):$/;"	f	language:Python
build_graph	compiler/utils.py	/^def build_graph(graph, node):$/;"	f	language:Python
temporaries	compiler/mips.py	/^temporaries = (Token(f't{x}') for x in range(8))$/;"	v	language:Python
operator_funcs	compiler/mips.py	/^operator_funcs = {$/;"	v	language:Python
get_temporaries	compiler/mips.py	/^def get_temporaries(n):$/;"	f	language:Python
get_temp	compiler/mips.py	/^def get_temp():$/;"	f	language:Python
get_val	compiler/mips.py	/^def get_val(node, mappings):$/;"	f	language:Python
allocate_register	compiler/mips.py	/^def allocate_register(node, mappings, instructions):$/;"	f	language:Python
build_mips	compiler/mips.py	/^def build_mips(tac_list):$/;"	f	language:Python
temporaries	compiler/tac.py	/^temporaries = (Token(f't{x}') for x in range(8))$/;"	v	language:Python
operator_funcs	compiler/tac.py	/^operator_funcs = {$/;"	v	language:Python
allocate_register	compiler/tac.py	/^def allocate_register(node, mappings, instructions):$/;"	f	language:Python
get_temp	compiler/tac.py	/^def get_temp():$/;"	f	language:Python
temporaries	compiler/tac.py	/^temporaries = (Token(f't{x}') for x in count(0))$/;"	v	language:Python
labels	compiler/tac.py	/^labels = (Token(f'L{x}') for x in count(0))$/;"	v	language:Python
tac_optimizations	compiler/tac.py	/^tac_optimizations = []$/;"	v	language:Python
operators	compiler/tac.py	/^operators = {$/;"	v	language:Python
get_val	compiler/tac.py	/^def get_val(node, mappings):$/;"	f	language:Python
optimization	compiler/tac.py	/^def optimization(optimization_func):$/;"	f	language:Python
tokenize	compiler/tac.py	/^def tokenize(lexeme):$/;"	f	language:Python
TacInstruction	compiler/tac.py	/^class TacInstruction:$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, label, reg, op, lhs, rhs):$/;"	m	language:Python	class:TacInstruction
__setattr__	compiler/tac.py	/^    def __setattr__(self, name, value):$/;"	m	language:Python	class:TacInstruction	file:
is_assingment	compiler/tac.py	/^    def is_assingment(self):$/;"	m	language:Python	class:TacInstruction
is_identifier_assingment	compiler/tac.py	/^    def is_identifier_assingment(self):$/;"	m	language:Python	class:TacInstruction
is_constant_assingment	compiler/tac.py	/^    def is_constant_assingment(self):$/;"	m	language:Python	class:TacInstruction
branches	compiler/tac.py	/^    def branches(self):$/;"	m	language:Python	class:TacInstruction
has_branches	compiler/tac.py	/^    def has_branches(self):$/;"	m	language:Python	class:TacInstruction
transform_algebra	compiler/tac.py	/^    def transform_algebra(self):$/;"	m	language:Python	class:TacInstruction
fold_constants	compiler/tac.py	/^    def fold_constants(self):$/;"	m	language:Python	class:TacInstruction
strength_reduce	compiler/tac.py	/^    def strength_reduce(self):$/;"	m	language:Python	class:TacInstruction
optimize	compiler/tac.py	/^    def optimize(self):$/;"	m	language:Python	class:TacInstruction
TacStartFunc	compiler/tac.py	/^class TacStartFunc(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, label):$/;"	m	language:Python	class:TacStartFunc
to_mips	compiler/tac.py	/^    def to_mips(self, mappings) -> List[str]:$/;"	m	language:Python	class:TacStartFunc
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacStartFunc	file:
TacEndFunc	compiler/tac.py	/^class TacEndFunc(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, label):$/;"	m	language:Python	class:TacEndFunc
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacEndFunc
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacEndFunc	file:
TacParam	compiler/tac.py	/^class TacParam(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, ptype, pname):$/;"	m	language:Python	class:TacParam
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacParam
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacParam	file:
TacCall	compiler/tac.py	/^class TacCall(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, reg, label):$/;"	m	language:Python	class:TacCall
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacCall
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacCall	file:
TacReturn	compiler/tac.py	/^class TacReturn(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, lhs):$/;"	m	language:Python	class:TacReturn
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacReturn
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacReturn	file:
TacLabel	compiler/tac.py	/^class TacLabel(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, label):$/;"	m	language:Python	class:TacLabel
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacLabel	file:
TacIf	compiler/tac.py	/^class TacIf(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, lhs, label):$/;"	m	language:Python	class:TacIf
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacIf
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacIf	file:
TacPrint	compiler/tac.py	/^class TacPrint(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, lhs):$/;"	m	language:Python	class:TacPrint
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacPrint
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacPrint	file:
TacOperation	compiler/tac.py	/^class TacOperation(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, temp, op, lhs, rhs):$/;"	m	language:Python	class:TacOperation
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacOperation
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacOperation	file:
TacAssingment	compiler/tac.py	/^class TacAssingment(TacInstruction):$/;"	c	language:Python
__init__	compiler/tac.py	/^    def __init__(self, lhs, rhs):$/;"	m	language:Python	class:TacAssingment
to_mips	compiler/tac.py	/^    def to_mips(self, mappings):$/;"	m	language:Python	class:TacAssingment
__str__	compiler/tac.py	/^    def __str__(self):$/;"	m	language:Python	class:TacAssingment	file:
TacApply	compiler/tac.py	/^class TacApply(TacInstruction):$/;"	c	language:Python
build_tac	compiler/tac.py	/^def build_tac(node, tac_list):$/;"	f	language:Python
Param	compiler/parse.py	/^Param = namedtuple('Param', ['type', 'name'])$/;"	v	language:Python
Token	compiler/parse.py	/^class Token:$/;"	c	language:Python
__init__	compiler/parse.py	/^    def __init__(self, lexeme):$/;"	m	language:Python	class:Token
val	compiler/parse.py	/^    def val(self):$/;"	m	language:Python	class:Token
is_temporary	compiler/parse.py	/^    def is_temporary(self):$/;"	m	language:Python	class:Token
is_identifier	compiler/parse.py	/^    def is_identifier(self):$/;"	m	language:Python	class:Token
is_constant	compiler/parse.py	/^    def is_constant(self):$/;"	m	language:Python	class:Token
to_mips	compiler/parse.py	/^    def to_mips(self):$/;"	m	language:Python	class:Token
__repr__	compiler/parse.py	/^    def __repr__(self):$/;"	m	language:Python	class:Token	file:
__str__	compiler/parse.py	/^    def __str__(self):$/;"	m	language:Python	class:Token	file:
Node	compiler/parse.py	/^class Node:$/;"	c	language:Python
func_params	compiler/parse.py	/^    def func_params(self):$/;"	m	language:Python	class:Node
func_args	compiler/parse.py	/^    def func_args(self):$/;"	m	language:Python	class:Node
is_leaf	compiler/parse.py	/^    def is_leaf(self):$/;"	m	language:Python	class:Node
__str__	compiler/parse.py	/^    def __str__(self):$/;"	m	language:Python	class:Node	file:
__repr__	compiler/parse.py	/^    def __repr__(self):$/;"	m	language:Python	class:Node	file:
__iter__	compiler/parse.py	/^    def __iter__(self):$/;"	m	language:Python	class:Node	file:
parse_ast	compiler/parse.py	/^def parse_ast(ast):$/;"	f	language:Python
get_next_indented	compiler/parse.py	/^def get_next_indented(nodes, head):$/;"	f	language:Python
parse	compiler/parse.py	/^def parse(nodes):$/;"	f	language:Python
operators	compiler/optimize.py	/^operators = {'+': add, '-': sub, '*': mul, '%': mod, '\/': truediv}$/;"	v	language:Python
has_reads	compiler/optimize.py	/^def has_reads(target, tac_list):$/;"	f	language:Python
eliminate_dead_code	compiler/optimize.py	/^def eliminate_dead_code(tac_list):$/;"	f	language:Python
find_usages_until	compiler/optimize.py	/^def find_usages_until(target, until, tac_list):$/;"	f	language:Python
propagate_copies	compiler/optimize.py	/^def propagate_copies(tac_list):$/;"	f	language:Python
debug_print	compiler/optimize.py	/^def debug_print(header, tac_list):$/;"	f	language:Python
optimize_tac	compiler/optimize.py	/^def optimize_tac(tac_list, debug=False):$/;"	f	language:Python
parse_args	compiler/compile.py	/^def parse_args():$/;"	f	language:Python
make_ast	compiler/compile.py	/^def make_ast(f):$/;"	f	language:Python
main	compiler/compile.py	/^def main():$/;"	f	language:Python
test_eliminate_dead_code	tests/test_optimize.py	/^def test_eliminate_dead_code():$/;"	f	language:Python
main	examples/out.asm	/^main:$/;"	l	language:Asm
ori	examples/out.asm	/^ori $t0, $0, 5$/;"	l	language:Asm
addi	examples/out.asm	/^addi $t1, $t0, 3$/;"	l	language:Asm
ori	examples/out.asm	/^ori $v0, $0, 1$/;"	l	language:Asm
move	examples/out.asm	/^move $a0, $t1$/;"	l	language:Asm
syscall	examples/out.asm	/^syscall$/;"	l	language:Asm
ori	examples/out.asm	/^ori $v0, $0, 10$/;"	l	language:Asm
syscall	examples/out.asm	/^syscall$/;"	l	language:Asm
